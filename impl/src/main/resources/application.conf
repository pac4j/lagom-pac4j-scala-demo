play.application.loader = org.pac4j.lagom.demo.impl.AuthJwtLoader

// Configuration for initializing PAC4J `JwtAuthenticator`.
// See http://www.pac4j.org/3.4.x/docs/authenticators/jwt.html for more information about JwtAuthenticator.

// Usually used only one type (signed/encrypted) of JWT and one algorithm.
// All you need is take a JWK from your Identity Provider.
// This example just demonstrates that you can use any approach for your case.
// For test JWKs genereted by `JWTTestDataGenerator`
pac4j.lagom.jwt.authenticator {
  signatures = [
    {
      algorithm = "HS256"
      jwk = {"kty":"oct","k":"N6wefanpbS-IubXsDH2GLh9McGJ2qslG6sdUIzq2YFM","alg":"HS256"}
    },
    {
      algorithm = "RS256"
      jwk = {"kty":"RSA","e":"AQAB","n":"kmnVeJfi9fU63bOZ_fg6KfmxCA5HrUzRG5vdvzlcg9DUw7Rc1ElULL1h0C-qMJ3MDSro__fxZ1Faq5ytdxjl5NAC5u9kuBpl0xllelpGn4XUFWFaEe3_Po4czzy9nWeUrMUkzwUVCqY1Lg2nhnkP7Shkx2-pK8AKZKKhOH4N5CwWWIm_l7l9xuBFhDgOf6SaYccq5xrqcfGWpd38SNU01IBZGr-ojvuxVbmaFAtnIvYYBLvNn_zZ-ojezgSIh5fNDgzH7O9KoojIESkylXbWixIqk6yiYbW84mX9FrTIAZteK4SPm4lKon6RXTDwJ5WosYaFSub7bHQcFdSmo9y9AQ"}
    },
    {
      algorithm = "ES256"
      jwk = {"kty":"EC","crv":"P-256","x":"IeirP57MkB2Lux7op9Uqn8mxeoeKUMOmw1hhAa0KLVo","y":"U-dXuE4olBx2E2pKbceGwQvoCVtjXZNJ9GZPJ711WOI"}
    }
  ]
  encryptions = [
    {
      method = "A256GCM"
      algorithm = "dir"
      jwk = {"kty":"oct","k":"N6wefanpbS-IubXsDH2GLh9McGJ2qslG6sdUIzq2YFM","alg":"HS256"}
    },
    {
      method = "A128GCM"
      algorithm = "RSA-OAEP-256"
      jwk = {"p":"zaysLhq5v1jrPkaqtE6FU5gRYXiJqNccsN43wgthhJTU73KNDiPyIeUa_ZXo3BXkgunivURgP6XLZLB5rAp72g_6gCrs_HSJwKuvvXiUHIUEV8ziRtsJpUrH2f-PmKVbPEFbHz0re9FC35PLKaE-VU39LYhO_KncKnd7wqkH8tk","kty":"RSA","q":"tj0VDnfnmneNiUNJWxOe8HdO4gQrSKdkoB9zH5ZFPLkKx63n0sDeiAqB2bPoCxLtyZfqXBxMsdlrHAv0iUv2CKJKxygyALQM2rJGGPeSZZ5IYkPPKXm8-IfkYeBhWNpCAe2CIO9XLhrg1Jo7Mwd-Vvumv8K0RVeBHjjJZ4Sx8mk","d":"TngSRNOCfDe2GOQNACRtZ9m-m4aru6GT4KwkqDvh7XOa1Fhx-ARk7KWDKsSg_fVUSypYPfdwleLwKVGLVm0tqPgi1govfMwJDp5p2K1RdGWRSPQoBbv8NFaN8jOnnBjLgd0W4SzkHhT-I3SF-HghpQUlHg4mKKB_8XeH2HMWltaKLH2iWrSZcZH93odaz0DdAsTL-iY0yqO9cWwSOM-YcurcZPx3DiiJipyXeTLpK_LLO50bVWNKQe3fJKXgaFLdy9qcfdM58sVsV46LMCRhWExlBI4EQRJXH2J6vxMuf_Tmx84TsHlo4NLKAGFdM3qvrC2xMR-nXFGbcq74EYiTAQ","e":"AQAB","qi":"Ntmn3T9pLejei8OL5L7QXmtfAIjqau5ni5sybitzS32soKjpjUhf-9k-TpwQ3qK-jHfS6rjvCjL1Oa4wFO1nwlXpD2GLsp-sFtcGn07FjYT0HlJ94cPoSR56f8_8zhGEJ8osvbd09nIB_Yz9T3gka0vmkTxyS3-G-6aiZdAF0cY","dp":"DzFHEqzEtb6yucnsiB8YuCEOf52wxXkGVIZFph7DGFEKHZnfk4DSPPC4eqzdI4y2cXknV4W6elkb2hczFaM8nNH7VgZVtRxCpKnJ9Hv4rNaiiH3I5ST-5GfOtWqsR8FHKP9G5NrW4HGHuA4pvqx7dz-oiPl9pCpD6hsjWDC2Npk","dq":"J_Vowo1kCSihrjFEymWY-h0O_NvxKbMai0maEpj-gXwJcxMcu8dyg93Z7wRVouf5n7RhvOSvpGeJ5tJwQhKX1fjP8K9Nl33jO6jPWfYe8Y0tTe6UZAG_f7c8SoHKlpL02jtbxyDzurZGChfvVxcTirsPKwjkQjgXparJ7prX8dE","n":"kmnVeJfi9fU63bOZ_fg6KfmxCA5HrUzRG5vdvzlcg9DUw7Rc1ElULL1h0C-qMJ3MDSro__fxZ1Faq5ytdxjl5NAC5u9kuBpl0xllelpGn4XUFWFaEe3_Po4czzy9nWeUrMUkzwUVCqY1Lg2nhnkP7Shkx2-pK8AKZKKhOH4N5CwWWIm_l7l9xuBFhDgOf6SaYccq5xrqcfGWpd38SNU01IBZGr-ojvuxVbmaFAtnIvYYBLvNn_zZ-ojezgSIh5fNDgzH7O9KoojIESkylXbWixIqk6yiYbW84mX9FrTIAZteK4SPm4lKon6RXTDwJ5WosYaFSub7bHQcFdSmo9y9AQ"}
    },
    {
      method = "A256GCM"
      algorithm = "ECDH-ES+A256KW"
      jwk = {"kty":"EC","d":"PLYXAxY8dSIyp6tmL0EuSOxA30uDDokkXMBFDopQ54M","crv":"P-256","x":"IeirP57MkB2Lux7op9Uqn8mxeoeKUMOmw1hhAa0KLVo","y":"U-dXuE4olBx2E2pKbceGwQvoCVtjXZNJ9GZPJ711WOI"}
    }
  ]
}